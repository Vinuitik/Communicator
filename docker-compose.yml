version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgresDB
    ports:
      - "5433:5432"  # Expose PostgreSQL on local port 5433
    environment:
      POSTGRES_USER: myapp_user
      POSTGRES_PASSWORD: example
      POSTGRES_DB: my_database
      TZ: ${HOST_TIMEZONE:-UTC}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    #restart: unless-stopped

  friend:
    build:
      context: ./friend  # Build the image from the current directory using the Dockerfile
    volumes:
      - maven-cache-friend:/root/.m2
    container_name: friend
    expose:
      - "8085"  # Internal exposure only, no external port mapping
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresDB:5432/my_database  # Use the correct hostname of the 'postgres' service
      SPRING_DATASOURCE_USERNAME: myapp_user
      SPRING_DATASOURCE_PASSWORD: example
      FILE_REPOSITORY_SERVICE_URL: http://fileRepository:5000
      TZ: ${HOST_TIMEZONE:-UTC}
    depends_on:
      - postgres
    command: java -jar app.jar  # Match the JAR name specified in the Dockerfile
    #restart: unless-stopped

  backup:
      build: 
        context: ./backup
        dockerfile: Dockerfile
      container_name: backupService
      environment:
        TZ: ${HOST_TIMEZONE:-UTC}
      depends_on:
        - postgres
        - fileRepository
      #restart: unless-stopped

  group:
      build: 
        context: ./group
        dockerfile: Dockerfile
      container_name: groupService
      expose:
        - "8086"  # Internal exposure only, no external port mapping
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgresDB:5432/my_database  # Use the correct hostname of the 'postgres' service
        SPRING_DATASOURCE_USERNAME: myapp_user
        SPRING_DATASOURCE_PASSWORD: example
        TZ: ${HOST_TIMEZONE:-UTC}
      volumes:
        - maven-cache-group:/root/.m2
      depends_on:
        - postgres
      #restart: unless-stopped

  connections:
      build: 
        context: ./connections
        dockerfile: Dockerfile
      container_name: connectionService
      expose:
        - "8088"  # Internal exposure only, no external port mapping
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgresDB:5432/my_database  # Use the correct hostname of the 'postgres' service
        SPRING_DATASOURCE_USERNAME: myapp_user
        SPRING_DATASOURCE_PASSWORD: example
        TZ: ${HOST_TIMEZONE:-UTC}
      volumes:
        - maven-cache-connections:/root/.m2
      depends_on:
        - postgres
      #restart: unless-stopped

  chrono:
      build: 
        context: ./chrono
        dockerfile: Dockerfile
      container_name: chronoService
      expose:
        - "8087"  # Internal exposure only, no external port mapping
      environment:
        TZ: ${HOST_TIMEZONE:-UTC}
      volumes:
        - maven-cache-chrono:/root/.m2
      depends_on:
        - friend
        - nginx
      #restart: unless-stopped


  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    environment:
      TZ: ${HOST_TIMEZONE:-UTC}
    ports:
      - "8090:80"  # Expose Nginx on port 80
    depends_on:
      - friend
      - group
      - connections
      - mcp-knowledge-server
    #restart: unless-stopped

  fileRepository:
    build:
      context: ./resourceRepository
      dockerfile: Dockerfile
    image: communicator-filerepository  # <-- This forces a lowercase name
    container_name: fileRepository
    expose:
      - "5000"  # Internal exposure only, no external port mapping
    volumes:
      - file-repo-photos:/app/photos
      - file-repo-videos:/app/videos
      - file-repo-voice:/app/voice
      - file-repo-personal:/app/personalResources
    environment:
      TZ: ${HOST_TIMEZONE:-UTC}
    #restart: unless-stopped

  # MCP Inspector - test any server

  mcp-knowledge-server:
    build:
      context: ./knowledgeMCP
      dockerfile: Dockerfile
    container_name: mcp-knowledge-server
    expose:
      - "8000"  # Internal exposure only, no external port mapping
    environment:
      TZ: ${HOST_TIMEZONE:-UTC}
      PYTHONUNBUFFERED: 1
    #restart: unless-stopped

  ai-agent:
     build:
       context: ./ai_agent
       dockerfile: Dockerfile
     container_name: ai-agent
     expose:
       - "8001"  # Internal exposure only, no external port mapping
     env_file:
       - ./ai_agent/.env  # Load environment variables from .env file
     environment:
       TZ: ${HOST_TIMEZONE:-UTC}
       PYTHONUNBUFFERED: 1
       GEMINI_API_KEY: ${GEMINI_API_KEY}  # Pass from environment variable
     depends_on:
       - nginx  # Depends on nginx since it makes API calls through it
       - mcp-knowledge-server  # Depends on MCP server
     #restart: unless-stopped



volumes:
  postgres-data:
    driver: local
  file-repo-photos:
    driver: local
  file-repo-videos:
    driver: local
  file-repo-voice:
    driver: local
  file-repo-personal:
    driver: local
  maven-cache-friend:
    driver: local
  maven-cache-group:
    driver: local
  maven-cache-connections:
    driver: local
  maven-cache-chrono:
    driver: local
