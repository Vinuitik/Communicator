events {
    worker_connections 1024;
}

http {

    include      mime.types;
    default_type application/octet-stream;

    upstream friend_service {
        server friend:8085;
    }

    # Add these global settings for file uploads
    client_max_body_size 100M;
    client_body_timeout 300s;
    client_header_timeout 300s;

    upstream group_service {
        server groupService:8086;
    }

    upstream connection_service {
        server connectionService:8088;
    }

    upstream media_service {
        server fileRepository:5000;
    }

    upstream mcp_knowledge_service {
        server mcp-knowledge-server:8000;
    }

    upstream chrono_service {
        server chronoService:8087;
    }

    upstream ai_agent_service {
         server ai-agent:8001;
    }

    upstream react_ui_service {
        server react-ui:80;
    }

    server {
        listen 80;
        server_name localhost;

        # Friend Service
        location /api/friend/ {
            proxy_pass http://friend_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;

            # Increase timeouts for large file uploads
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            proxy_request_buffering off;
        }

        


        # Group Service API - handles all other /api/groups/* endpoints
        location /api/groups/ {
            proxy_pass http://group_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;
            
            # Add CORS headers for API requests
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                return 204;
            }
        }

        

        # Connection Service
        location /api/connections/ {
            proxy_pass http://connection_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;
        }

        location /api/fileRepository/ {
            proxy_pass http://media_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;
        }

        # MCP Knowledge Server
        location /api/mcp/knowledge/ {
            proxy_pass http://mcp_knowledge_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;
            
            # Add CORS headers for MCP server
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                return 204;
            }
        }

        # Chrono Service (for manual testing only)
        location /api/chrono/ {
            proxy_pass http://chrono_service/chrono/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin http://nginx;
        }

        # AI Agent Service
        location /api/ai/ {
             proxy_pass http://ai_agent_service/;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_set_header Origin http://nginx;
             
             # WebSocket support
             proxy_http_version 1.1;
             proxy_set_header Upgrade $http_upgrade;
             proxy_set_header Connection "upgrade";
             proxy_cache_bypass $http_upgrade;
             
             # Add CORS headers for AI agent
             add_header Access-Control-Allow-Origin *;
             add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
             add_header Access-Control-Allow-Headers "Content-Type, Authorization";
             
             # Handle preflight requests
             if ($request_method = 'OPTIONS') {
                 add_header Access-Control-Allow-Origin *;
                 add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                 add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                 return 204;
            }
        }

        # React UI Service - Modern SPA routing
        location /app/ {
            proxy_pass http://react_ui_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle client-side routing for SPA
            proxy_intercept_errors on;
            error_page 404 = @react_fallback;
            
            # Add headers for modern web apps
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            
            # No caching for development
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # React UI fallback for client-side routing
        location @react_fallback {
            proxy_pass http://react_ui_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # React UI health check
        location /app/health {
            proxy_pass http://react_ui_service/health;
            proxy_set_header Host $host;
            access_log off;
        }

        # Redirect for convenience - redirect /validation to React app
        location = /validation {
            return 302 /app/validation;
        }

        # Redirect root path to React app for development
        location = /react {
            return 302 /app/;
        }



        # Block direct access to /fileUpload/fileUpload.html for security
        location = /fileUpload/fileUpload.html {
            return 404;
        }

        # CalendarView - NO CACHING for development - handles /fileUpload/{numeric-id} pattern
        location ~ ^/fileUpload/([0-9]+)/?$ {
            root /usr/share/nginx/html;
            try_files /fileUpload/fileUpload.html =404;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Social Media - handles /social with query parameters like ?friendId=2
        location = /social {
            root /usr/share/nginx/html;
            try_files /social/social.html =404;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Create group page - serve static HTML
        location = /api/groups/createGroup {
            root /usr/share/nginx/html;
            try_files /createGroup/createGroup.html =404;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Custom route: /index -> serve index.html - CACHING DISABLED FOR DEVELOPMENT
        location = /index {
            root /usr/share/nginx/html;
            try_files /index.html =404;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Custom route: /stats -> serve analytics.html - CACHING DISABLED FOR DEVELOPMENT
        location = /stats {
            root /usr/share/nginx/html;
            try_files /analytics/analytics.html =404;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        location /api-test/ {
            alias /usr/share/nginx/html/Test/;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Group static files - serve CSS and JS assets - CACHING DISABLED FOR DEVELOPMENT
        location /groupsView/ {
            root /usr/share/nginx/html;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        location /createGroup/ {
            root /usr/share/nginx/html;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        location /groupDetails/ {
            root /usr/share/nginx/html;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        location /groupKnowledge/ {
            root /usr/share/nginx/html;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Static files location - CACHING DISABLED FOR DEVELOPMENT
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ @fallback;
            # expires 14d;
            # add_header Cache-Control "public, max-age=1209600";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Fallback for static HTML files
        location @fallback {
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }
    }
}